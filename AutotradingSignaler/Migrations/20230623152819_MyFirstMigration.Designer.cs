// <auto-generated />
using System;
using AutotradingSignaler.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace AutotradingSignaler.Migrations
{
    [DbContext(typeof(BaseMigrationDbContext))]
    [Migration("20230623152819_MyFirstMigration")]
    partial class MyFirstMigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("AutotradingSignaler.Contracts.Data.Token", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("ChainId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Decimals")
                        .HasColumnType("integer");

                    b.Property<DateTime>("LastModified")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("LogoURI")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<double>("Price")
                        .HasColumnType("double precision");

                    b.Property<string>("Symbol")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Address");

                    b.HasIndex("ChainId");

                    b.HasIndex("Name");

                    b.HasIndex("Symbol");

                    b.HasIndex("Address", "ChainId");

                    b.HasIndex("Name", "ChainId");

                    b.HasIndex("Symbol", "ChainId");

                    b.ToTable("Tokens");
                });

            modelBuilder.Entity("AutotradingSignaler.Contracts.Data.Trade", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<double>("AverageSellPrice")
                        .HasColumnType("double precision");

                    b.Property<int>("ChainId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("LastModified")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long?>("PlattformId")
                        .HasColumnType("bigint");

                    b.Property<double>("Profit")
                        .HasColumnType("double precision");

                    b.Property<string>("TokenIn")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<double>("TokenInAmount")
                        .HasColumnType("double precision");

                    b.Property<long?>("TokenInId")
                        .HasColumnType("bigint");

                    b.Property<double>("TokenInPrice")
                        .HasColumnType("double precision");

                    b.Property<string>("TokenOut")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<double>("TokenOutAmount")
                        .HasColumnType("double precision");

                    b.Property<long?>("TokenOutId")
                        .HasColumnType("bigint");

                    b.Property<double>("TokenOutPrice")
                        .HasColumnType("double precision");

                    b.Property<double>("TokensSold")
                        .HasColumnType("double precision");

                    b.Property<string>("Trader")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("TxHash")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("PlattformId");

                    b.HasIndex("TokenInId");

                    b.HasIndex("TokenOutId");

                    b.ToTable("Trades");
                });

            modelBuilder.Entity("AutotradingSignaler.Contracts.Data.TradingPlattform", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<int>("ChainId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Factory")
                        .HasColumnType("text");

                    b.Property<int>("Fee")
                        .HasColumnType("integer");

                    b.Property<bool>("IsValid")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("LastModified")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Router")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Version")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("Factory");

                    b.HasIndex("Name");

                    b.HasIndex("Router");

                    b.ToTable("TradingPlattforms");
                });

            modelBuilder.Entity("AutotradingSignaler.Contracts.Data.Watchlist", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("AddedFrom")
                        .HasColumnType("text");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("LastModified")
                        .HasColumnType("timestamp with time zone");

                    b.Property<double>("ProfitFactor")
                        .HasColumnType("double precision");

                    b.Property<int>("Trades")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("Address");

                    b.ToTable("Watchlist");
                });

            modelBuilder.Entity("AutotradingSignaler.Contracts.Data.Trade", b =>
                {
                    b.HasOne("AutotradingSignaler.Contracts.Data.TradingPlattform", "Plattform")
                        .WithMany()
                        .HasForeignKey("PlattformId");

                    b.HasOne("AutotradingSignaler.Contracts.Data.Token", "TokenInData")
                        .WithMany()
                        .HasForeignKey("TokenInId");

                    b.HasOne("AutotradingSignaler.Contracts.Data.Token", "TokenOutData")
                        .WithMany()
                        .HasForeignKey("TokenOutId");

                    b.Navigation("Plattform");

                    b.Navigation("TokenInData");

                    b.Navigation("TokenOutData");
                });
#pragma warning restore 612, 618
        }
    }
}
